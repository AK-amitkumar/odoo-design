#!/usr/bin/env python
import argparse
import commands
import os
import sys
import textwrap
try:
    import git
    from dialog import Dialog
    d = Dialog(dialog="dialog")
except Exception:
    sys.exit(textwrap.dedent("""
        Please, first install dependencies by running the following commands:

        Linux
        -----

        sudo pip install gitpython python2-pythondialog git-qdiff qbzr
        sudo apt-get install dialog

        OSX
        ---

        pip install gitpython python2-pythondialog git-qdiff
        brew install dialog

        Windows
        -------

        haha :-)
        """))

program_title = "Odoo Design Interface 2.0 - (Copyright) Odoo 1976 - [ This program is Shareware ]"
emergency = "Call 555-fme@odoo.com in order to fix this !"
d.set_background_title(program_title)

# Setup options
parser = argparse.ArgumentParser(description=program_title)
parser.add_argument('-d','--dir', help='Theme directory')
parser.add_argument('-c','--call', help='Call internal function')
cmd_args = vars(parser.parse_args())

# Setup directories
odoo_dir = os.path.realpath(os.path.dirname(__file__))
if cmd_args['dir']:
    themes_dir = os.path.realpath(os.path.expanduser(cmd_args['dir']))
else:
    themes_dir = os.path.realpath(os.path.join(odoo_dir, '../design-themes'))

if not os.path.isdir(themes_dir):
    sys.exit("%s is not a directory.\n\nTry to run %s --dir=<theme_dir>" % (themes_dir, sys.argv[0]))

try:
    server = git.Repo(odoo_dir)
    repo = git.Repo(themes_dir)
except git.errors.InvalidGitRepositoryError:
    sys.exit("%s is not a git repository" % themes_dir)

menu_entries = []
def menu_entry(title, key, conditional=None):
    if conditional is None:
        conditional = lambda: True
    def decorator(fn):
        if any([menu['key'] == key for menu in menu_entries]):
            raise KeyError("Duplicate key for menu item '%s' %r" % (title, fn))
        menu_entries.append(dict(title=title, key=key, conditional=conditional, fn=fn))
        return fn
    return decorator

# HELPERS
def database_list():
    cmd = 'psql -c "SELECT datname FROM pg_database WHERE datistemplate = false and datname <> \'postgres\';" -d postgres'
    status, out = commands.getstatusoutput(cmd)
    if status:
        sys.exit(out)
        d.msgbox("Could not fetch database list")
        return []
    else:
        db_list = [db.strip() for db in out.splitlines()[2:-1]]
        return db_list

def database_exists(dbname):
    return dbname in database_list()

def drop_database(dbname, silent=False):
    if os.system('dropdb %s' % dbname) and not silent:
        d.msgbox("Could not drop database '%s'" % dbname)

def repo_is_clean():
    if repo.is_dirty:
        msg = "In order to continue you have to push your changes first.\n\nDo you want to do this now ?"
        r = d.yesno(msg, width=40)
        if r != d.OK:
            return False
        push_changes()
    return True

def server_update():
    clear()
    print("Check for server updates...")
    return server.git.pull() != 'Already up-to-date.' # Gasp!

def pull_changes():
    try:
        clear()
        print("Checking if someone else made changes to your theme...")
        repo.git.pull()
        return True
    except git.GitCommandError:
        d.msgbox("Someone else made changes that conflicts with yours.\n\n" + emergency, width=60)
        return False

def start_server(args=None, mode='i', module='website', dropdb=False):
    db = repo.active_branch
    if dropdb:
        drop_database(db, silent=True)
    db_cmp = db.replace('-', '_')
    modules = os.listdir(themes_dir)
    for mod in modules:
        if mod in db_cmp:
            module = mod
    if args is None:
        args = []
    addons_path = "%s/addons,%s" % (odoo_dir, themes_dir)

    server_updated = server_update()
    if not database_exists(db):
        # if database does not exist, install mode is forced
        mode = 'i'
    elif server_updated:
        d.msgbox("A new version of the server has been downloaded and a database upgrade will be forced.\n\n"
                 "If you experience problems, maybe you should consider using the option 'Start server and reset database'.", width=60)
        mode = 'u'
        module = 'base'

    args += ('-' + mode, module)
    cmd = "'%s/openerp-server' start -d '%s' --addons-path='%s' %s --dev" % (
            odoo_dir, db, addons_path, ' '.join(args)
        )
    print("Starting Server: %s" % cmd)
    os.system(cmd)
    if server_updated:
        clear()
        print("As the server has recently been updated, it is necessary that you restart the 'start.sh' program again.\n\n")
        return False
    return True

def clear():
    os.system('clear')

def clean_folder(path):
    os.system('find "%s" -name "*.pyc" -delete' % path)
    os.system('find "%s" -type d -empty -delete' % path)

def main_menu():
    title = "Current Theme: %s" % repo.active_branch
    if repo.is_dirty:
        title += "\n\nNOTE: You have unpushed changes !"
    choices = []
    for choice in menu_entries:
        if choice['conditional']():
            key = '%s)' % choice['key']
            choices.append((key, choice['title']))
    choices.append(("Q)", "Quit"))
    code, tag = d.menu(title, choices=choices, height=(len(choices) + 10), menu_height=len(choices))
    clear()
    if code == d.OK:
        for menu in menu_entries:
            if tag[0] == menu['key']:
                return menu['fn']()
    return None

# MENU ENTRIES
@menu_entry("Start server", key='S')
def start_server_normal():
    return start_server(mode='u')

@menu_entry("Start server and reset database", key='R')
def start_server_reset():
    return start_server(mode='i', dropdb=True)

@menu_entry("Database Manager", key='M', conditional=lambda: False)
def db_manager():
    databases = database_list()
    if databases:
        choices = [(db, "", False) for db in databases]
        info = "\nYou should drop a database if it is in a buggy state and you want to reinstall from scratch.\n"
        btn, dbs = d.checklist(info, choices=choices, title="Drop a database", height=(len(databases) + 10), list_height=len(databases))
        if btn == d.OK and dbs:
            clear()
            for db in dbs:
                print("Dropping database %s" % db)
                drop_database(db)
    return True

@menu_entry("Create a new Theme", key='C', conditional=lambda: False)
def create_theme():
    return True

@menu_entry("Switch to another theme", key='W', conditional=lambda: len(repo.branches) > 1)
def switch_branch():
    if repo_is_clean():
        default = None
        choices = []
        for i, branch in enumerate(sorted(repo.branches, key=lambda r: r.name)):
            code = '%d)' % (i + 1)
            if branch.name == repo.active_branch:
                default = code
            choices.append((code, branch.name))
        code, tag = d.menu("Select the theme to work on", choices=choices, default_item=default)
        if code == d.OK:
            new_branch = filter(lambda c: c[0] == tag, choices)[0][1]
            try:
                clear()
                print("Switching to theme %s..." % new_branch)
                repo.git.checkout(new_branch)
                pull_changes()
                clean_folder(themes_dir)
            except:
                d.msgbox("There was an error switching to theme `%s`" % new_branch)
    return True

@menu_entry("Push changes", key='P', conditional=lambda: repo.is_dirty)
def push_changes():
    if pull_changes() and repo.is_dirty:
        code, msg = d.inputbox("For your own organisation and a better collaboration,"
            "it's better to provide a short message explaining your changes.\n\n"
            "Eg: Added a new 'Contact Us' snippet", width=70)
        if code == d.OK:
            if not msg:
                d.msgbox("Could not push changes without a message.")
            else:
                clear()
                print("Pushing changes...")
                repo.git.add('-A', '.')
                repo.git.commit('-a', '-m', (msg or 'm'))
                repo.git.push('origin')
    return True

@menu_entry("Discard changes", key='D', conditional=lambda: repo.is_dirty)
def discard_changes():
    msg = "Are you REALLY sure you want to discard your changes ?\n\nType 'ok' in the box below to proceed."
    if repo.is_dirty:
        button, text = d.inputbox(msg, width=35)
        if button == d.OK and text.lower() == 'ok':
            repo.git.checkout('.')
    return True

@menu_entry("View changes", key='V', conditional=lambda: repo.is_dirty)
def show_diff():
    try:
        clear()
        print("Checking differences...")
        repo.git.add('-A', '.')
        repo.git.qdiff('HEAD')
        repo.git.reset('HEAD')
    except Exception:
        d.msgbox("Sorry but the required tool for this option is not installed on your computer.\n\n" + emergency, width=60)
    return True

# MAIN
call = cmd_args['call']
if call:
    fn = globals().get(call)
    if fn:
        fn()
    else:
        sys.exit("Could not find function %s" % call)
else:
    # Main loop
    while True:
        if not main_menu():
            break
