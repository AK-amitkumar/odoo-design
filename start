#!/usr/bin/env python
import commands
import os
import sys
import textwrap
try:
    import git
    from dialog import Dialog
    d = Dialog(dialog="dialog")
except Exception:
    sys.exit(textwrap.dedent("""
        Please, first install dependencies by running the following commands:

        Linux
        -----

        sudo pip install gitpython python2-pythondialog git-qdiff
        sudo apt-get install dialog

        OSX
        ---

        pip install gitpython python2-pythondialog git-qdiff
        brew install dialog

        Windows
        -------

        haha :-)
        """))

d.set_background_title("Odoo Design Interface 2.0 - (Copyright) Odoo 1976 - [ This program is Shareware ]")

# Setup directories
odoo_dir = os.path.realpath(os.path.dirname(__file__))
themes_dir = os.path.realpath(os.path.join(odoo_dir, '../design-themes'))

if len(sys.argv) > 1:
    themes_dir = os.path.realpath(os.path.expanduser(sys.argv[1]))

if not os.path.isdir(themes_dir):
    sys.exit("%s is not a directory.\n\nTry to run %s <theme_dir>" % (themes_dir, sys.argv[0]))

try:
    repo = git.Repo(themes_dir)
except git.errors.InvalidGitRepositoryError:
    sys.exit("%s is not a git repository" % themes_dir)

def database_exists(dbname):
    status, out = commands.getstatusoutput("psql -c 'select 1 as test;' -d %s" % dbname)
    return status == 0

def start_server(args=None, mode='i', module='website'):
    if args is None:
        args = []
    addons_path = "%s/addons,%s" % (odoo_dir, themes_dir)
    db = repo.active_branch
    if not database_exists(db):
        # if database does not exist, install mode is forced
        mode = 'i'
    args += ('-' + mode, module)
    cmd = "'%s/openerp-server' start -d '%s' --addons-path='%s' %s --dev" % (
            odoo_dir, db, addons_path, ' '.join(args)
        )
    print("Starting %s" % cmd)
    os.system(cmd)
    return True

def repo_is_clean():
    if repo.is_dirty:
        msg = "In order to continue you have to push your changes first.\n\nDo you want to do this now ?"
        r = d.yesno(msg, width=50)
        if r != d.OK:
            return False
        push_changes()
    return True

def push_changes():
    if repo.is_dirty:
        code, msg = d.inputbox("For your own organisation and a better collaboration,"
            "it's better to provide a short message explaining your changes.\n\n"
            "Eg: Added a new 'Contact Us' snippet", width=70)
        if code == d.OK:
            clear()
            print("Pushing changes...")
            repo.git.add('-A', '.')
            repo.git.commit('-a', '-m', (msg or 'm'))
            repo.git.push('origin')
    return True

def discard_changes():
    if repo.is_dirty and d.yesno("Are you sure you want to discard your changes ?") == d.OK:
        repo.git.checkout('.')
    return True

def switch_branch():
    if repo_is_clean():
        default = None
        choices = {}
        for i, branch in enumerate(sorted(repo.branches, key=lambda r: r.name)):
            code = '%d)' % (i + 1)
            if branch.name == repo.active_branch:
                default = code
            choices[code] = branch.name
        choices_list = [(k, v) for k, v in choices.items()]
        code, tag = d.menu("Select the theme to work on", choices=choices_list, default_item=default)
        if code == d.OK:
            new_branch = choices[tag]
            try:
                clear()
                print("Switching to theme %s..." % new_branch)
                repo.git.checkout(new_branch)
                repo.git.pull()
            except:
                d.msg("There was an error switching to theme `%s`" % new_branch)
    return True

def create_theme():
    pass

def main_menu():
    title = "Current Theme: %s" % repo.active_branch
    if repo.is_dirty:
        title += "\n\nNOTE: You have unpushed changes !"
    choices = [
        ("1)", "Start server"),
        ("2)", "Start server and reset database"),
        # ("3)", "Switch to another theme"),
        # ("4)", "Create a new theme"),
    ]
    if repo.is_dirty:
        choices.append(("5)", "Push changes"))
        choices.append(("6)", "Discard changes"))
    choices.append(("Q)", "Quit"))
    code, tag = d.menu(title, choices=choices, height=20)
    clear()
    if code == d.OK:
        if tag == '1)':
            return start_server(mode='u')
        elif tag == '2)':
            return start_server(mode='i')
        elif tag == '3)':
            return switch_branch()
        elif tag == '4)':
            return create_theme()
        elif tag == '5)':
            return push_changes()
        elif tag == '6)':
            return discard_changes()
    return None

def clear():
    os.system('clear')

# Main loop
while True:
    if not main_menu():
        break
